module Fastlane
  class PluginManager
    require 'bundler'

    PLUGINSFILE_NAME = "Plugins"

    def initialize
      # unless plugins_attached?
      #   UI.important("fastlane plugins are not enabled for this project")
      #   UI.important("Please run `fastlane ")
      # end
    end

    def gemfile_path
      # This is pretty important, since we don't know what kind of 
      # Gemfile the user has (e.g. Gemfile, gems.rb, or custom env variable)
      Bundler::SharedHelpers.default_gemfile.to_s
    end

    def pluginsfile_path
      File.join(FastlaneFolder.path, PLUGINSFILE_NAME)
    end

    def gemfile_content
      return File.read(gemfile_path) if File.exist?(gemfile_path)
      nil
    end

    def pluginsfile_content
      return File.read(pluginsfile_path) if File.exist?(pluginsfile_path)
      nil
    end

    def add_dependency(plugin_name)
      unless (pluginsfile_content || "").include?(plugin_name)
        content = pluginsfile_content || "# Autogenerated by fastlane\n\n"
        content += "gem '#{plugin_name}'\n"
        File.write(pluginsfile_path, content)
      end

      # We do this *after* creating the Plugin file
      # Since `bundle exec` would be broken if something fails on the way
      ensure_plugins_attached!

      true
    end

    # Makes sure, the user's Gemfile actually loads the Plugins file
    def plugins_attached?
      gemfile_content.include?(code_to_attach)
    end

    def ensure_plugins_attached!
      return true if plugins_attached?
      UI.important("Looks like fastlane plugins are not yet set up for this project")
      if gemfile_content.to_s.length > 0
        UI.important("fastlane will modify your existing Gemfile at path '#{gemfile_path}'")
      else
        UI.important("fastlane will create a new Gemfile at path '#{gemfile_path}'")
      end
      UI.important("This change is neccessary for fastlane plugins to work")
      
      if UI.confirm("Can fastlane modify the Gemfile at path '#{gemfile_path}' for you?")
        attach_plugins!
        UI.success("Successfully modified '#{gemfile_path}'")
      else
        UI.important("Please add the following code to your Gemfile:")
        puts ""
        puts code_to_attach.magenta # we use puts to make it easier to copy and paste
        UI.user_error!("Please update your Gemfile and run fastlane again")
      end
      return true
    end

    # The code required to load the Plugins file
    def code_to_attach
      "plugins_path = File.join(File.dirname(__FILE__), 'fastlane', '#{PLUGINSFILE_NAME}')\n" + 
      "eval(File.read(plugins_path), binding) if File.exist?(plugins_path)"
    end

    # Modify the user's Gemfile to load the plugins
    def attach_plugins!
      content = gemfile_content || "source \"https://rubygems.org\"\n"
      content += "\n#{code_to_attach}\n"
      File.write(gemfile_path, content)
    end

    def install_dependencies
      ensure_plugins_attached!
      FastlaneCore::CommandExecutor.execute(command: "bundle install", print_all: true)
    end

    def update_dependencies
      ensure_plugins_attached!
      FastlaneCore::CommandExecutor.execute(command: "bundle update", print_all: true)
    end
  end
end